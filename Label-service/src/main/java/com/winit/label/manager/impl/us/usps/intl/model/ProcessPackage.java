package com.winit.label.manager.impl.us.usps.intl.model;

import java.net.MalformedURLException;
import java.net.URL;
import javax.xml.namespace.QName;
import javax.xml.ws.WebEndpoint;
import javax.xml.ws.WebServiceClient;
import javax.xml.ws.WebServiceFeature;
import javax.xml.ws.Service;

/**
 * GSS Mailer Web Service
 *
 * This class was generated by Apache CXF 2.7.12
 * 2014-09-22T15:51:41.251+08:00
 * Generated source version: 2.7.12
 * 
 */
@WebServiceClient(name = "ProcessPackage", 
                  wsdlLocation = "https://gss.usps.com/usps-cpas/TestGSSAPI/GSSMailerWebService.asmx?wsdl",
                  targetNamespace = "http://www.usps-cpas.com/usps-cpas/GSSAPI/") 
public class ProcessPackage extends Service {

    public final static URL WSDL_LOCATION;

    public final static QName SERVICE = new QName("http://www.usps-cpas.com/usps-cpas/GSSAPI/", "ProcessPackage");
    public final static QName ProcessPackageSoap = new QName("http://www.usps-cpas.com/usps-cpas/GSSAPI/", "ProcessPackageSoap");
    public final static QName ProcessPackageSoap12 = new QName("http://www.usps-cpas.com/usps-cpas/GSSAPI/", "ProcessPackageSoap12");
    static {
        URL url = null;
        try {
            url = new URL("https://gss.usps.com/usps-cpas/TestGSSAPI/GSSMailerWebService.asmx?wsdl");
        } catch (MalformedURLException e) {
            java.util.logging.Logger.getLogger(ProcessPackage.class.getName())
                .log(java.util.logging.Level.INFO, 
                     "Can not initialize the default wsdl from {0}", "https://gss.usps.com/usps-cpas/TestGSSAPI/GSSMailerWebService.asmx?wsdl");
        }
        WSDL_LOCATION = url;
    }

    public ProcessPackage(URL wsdlLocation) {
        super(wsdlLocation, SERVICE);
    }

    public ProcessPackage(URL wsdlLocation, QName serviceName) {
        super(wsdlLocation, serviceName);
    }

    public ProcessPackage() {
        super(WSDL_LOCATION, SERVICE);
    }
    

    /**
     *
     * @return
     *     returns ProcessPackageSoap
     */
    @WebEndpoint(name = "ProcessPackageSoap")
    public ProcessPackageSoap getProcessPackageSoap() {
        return super.getPort(ProcessPackageSoap, ProcessPackageSoap.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns ProcessPackageSoap
     */
    @WebEndpoint(name = "ProcessPackageSoap")
    public ProcessPackageSoap getProcessPackageSoap(WebServiceFeature... features) {
        return super.getPort(ProcessPackageSoap, ProcessPackageSoap.class, features);
    }
    /**
     *
     * @return
     *     returns ProcessPackageSoap
     */
    @WebEndpoint(name = "ProcessPackageSoap12")
    public ProcessPackageSoap getProcessPackageSoap12() {
        return super.getPort(ProcessPackageSoap12, ProcessPackageSoap.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns ProcessPackageSoap
     */
    @WebEndpoint(name = "ProcessPackageSoap12")
    public ProcessPackageSoap getProcessPackageSoap12(WebServiceFeature... features) {
        return super.getPort(ProcessPackageSoap12, ProcessPackageSoap.class, features);
    }

}
